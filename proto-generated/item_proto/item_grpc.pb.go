// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package item_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	Create(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
	//Unary
	Get(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*Item, error)
	//Server streaming
	GetItemsBySeller(ctx context.Context, in *SellerId, opts ...grpc.CallOption) (ItemService_GetItemsBySellerClient, error)
	//Client streaming
	CreateItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_CreateItemsClient, error)
	//Bidirectional streaming
	BidiItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_BidiItemsClient, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) Create(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/ItemService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) Get(ctx context.Context, in *ItemId, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/ItemService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemsBySeller(ctx context.Context, in *SellerId, opts ...grpc.CallOption) (ItemService_GetItemsBySellerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[0], "/ItemService/GetItemsBySeller", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceGetItemsBySellerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ItemService_GetItemsBySellerClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type itemServiceGetItemsBySellerClient struct {
	grpc.ClientStream
}

func (x *itemServiceGetItemsBySellerClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *itemServiceClient) CreateItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_CreateItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[1], "/ItemService/CreateItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceCreateItemsClient{stream}
	return x, nil
}

type ItemService_CreateItemsClient interface {
	Send(*Item) error
	CloseAndRecv() (*ItemIds, error)
	grpc.ClientStream
}

type itemServiceCreateItemsClient struct {
	grpc.ClientStream
}

func (x *itemServiceCreateItemsClient) Send(m *Item) error {
	return x.ClientStream.SendMsg(m)
}

func (x *itemServiceCreateItemsClient) CloseAndRecv() (*ItemIds, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ItemIds)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *itemServiceClient) BidiItems(ctx context.Context, opts ...grpc.CallOption) (ItemService_BidiItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ItemService_ServiceDesc.Streams[2], "/ItemService/BidiItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &itemServiceBidiItemsClient{stream}
	return x, nil
}

type ItemService_BidiItemsClient interface {
	Send(*ItemId) error
	Recv() (*Item, error)
	grpc.ClientStream
}

type itemServiceBidiItemsClient struct {
	grpc.ClientStream
}

func (x *itemServiceBidiItemsClient) Send(m *ItemId) error {
	return x.ClientStream.SendMsg(m)
}

func (x *itemServiceBidiItemsClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility
type ItemServiceServer interface {
	Create(context.Context, *Item) (*Item, error)
	//Unary
	Get(context.Context, *ItemId) (*Item, error)
	//Server streaming
	GetItemsBySeller(*SellerId, ItemService_GetItemsBySellerServer) error
	//Client streaming
	CreateItems(ItemService_CreateItemsServer) error
	//Bidirectional streaming
	BidiItems(ItemService_BidiItemsServer) error
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (UnimplementedItemServiceServer) Create(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedItemServiceServer) Get(context.Context, *ItemId) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedItemServiceServer) GetItemsBySeller(*SellerId, ItemService_GetItemsBySellerServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItemsBySeller not implemented")
}
func (UnimplementedItemServiceServer) CreateItems(ItemService_CreateItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateItems not implemented")
}
func (UnimplementedItemServiceServer) BidiItems(ItemService_BidiItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiItems not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).Create(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ItemService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).Get(ctx, req.(*ItemId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemsBySeller_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SellerId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemServiceServer).GetItemsBySeller(m, &itemServiceGetItemsBySellerServer{stream})
}

type ItemService_GetItemsBySellerServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type itemServiceGetItemsBySellerServer struct {
	grpc.ServerStream
}

func (x *itemServiceGetItemsBySellerServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _ItemService_CreateItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).CreateItems(&itemServiceCreateItemsServer{stream})
}

type ItemService_CreateItemsServer interface {
	SendAndClose(*ItemIds) error
	Recv() (*Item, error)
	grpc.ServerStream
}

type itemServiceCreateItemsServer struct {
	grpc.ServerStream
}

func (x *itemServiceCreateItemsServer) SendAndClose(m *ItemIds) error {
	return x.ServerStream.SendMsg(m)
}

func (x *itemServiceCreateItemsServer) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ItemService_BidiItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ItemServiceServer).BidiItems(&itemServiceBidiItemsServer{stream})
}

type ItemService_BidiItemsServer interface {
	Send(*Item) error
	Recv() (*ItemId, error)
	grpc.ServerStream
}

type itemServiceBidiItemsServer struct {
	grpc.ServerStream
}

func (x *itemServiceBidiItemsServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func (x *itemServiceBidiItemsServer) Recv() (*ItemId, error) {
	m := new(ItemId)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ItemService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ItemService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItemsBySeller",
			Handler:       _ItemService_GetItemsBySeller_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateItems",
			Handler:       _ItemService_CreateItems_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiItems",
			Handler:       _ItemService_BidiItems_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/item.proto",
}
